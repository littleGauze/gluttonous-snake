!function(n){var t={};function e(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:o})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var i in n)e.d(o,i,function(t){return n[t]}.bind(null,i));return o},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=4)}([function(n,t,e){var o=e(1);"string"==typeof o&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1};e(3)(o,i);o.locals&&(n.exports=o.locals)},function(n,t,e){(n.exports=e(2)(!1)).push([n.i,":root {\n  --fg-1: #000;\n  --fg-2: #4acfef;\n  --fg-3: #caa2d2;\n}\n\nhtml, body { height: 100%; }\n\nbody {\n  overflow: hidden;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n  color: var(--fg-1);\n  background-color: white;\n  font-family: 'Courier New', Courier, monospace;\n}\n\ndiv.main {\n  width: 850px;\n}\n\naside {\n  float: left;\n  width: 200px;\n  height: 720px;\n  border: 1px solid var(--fg-1);\n}\n\nsection.playground {\n  margin-left: 220px;\n}\n\nsection div.chat {\n  overflow: hidden;\n  width: 600px;\n  margin-top: 20px;\n  border: 1px solid var(--fg-1);\n}\n\ndiv.chat-board {\n  height: 216px;\n  overflow-y: scroll;\n}\n\ndiv.chat-board ul {\n  margin: 0;\n  padding: 10px 20px;\n  list-style: none;\n  border-top: 1px solid var(--fg-1);\n}\n\ndiv.chat-board ul li {\n  position: relative;\n  margin-top: 25px;\n  font-size: 14px;\n  height: 20px;\n  line-height: 23px;\n}\n\ndiv.chat-board ul li span.nick {\n  font-weight: bold;\n}\n\ndiv.chat-board ul li span.time {\n  font-size: 12px;\n  display: block;\n  position: absolute;\n  left: 0;\n  top: -15px;\n  color: #666;\n}\n\ndiv.typer {\n  position: relative;\n  border-top: 1px solid var(--fg-1);\n}\n\ndiv.typer input {\n  width: 520px;\n  height: 30px;\n  margin: 0;\n  padding: 0;\n  border: none;\n  text-indent: 20px;\n  font-size: 14px;\n  -webkit-appearance: none;\n}\n\ndiv.typer input:focus {\n  outline: none;\n  box-shadow: 0 0 5px rgb(177, 135, 201) inset;\n}\n\ndiv.typer button {\n  width: 80px;\n  float: right;\n  height: 30px;\n  border: none;\n  border-left: 1px solid var(--fg-1);\n  font-size: 14px;\n  background-color: #eee;\n}\n\ndiv.typer button:focus {\n  outline: none;\n  box-shadow: 0 0 5px rgb(177, 135, 201) inset;\n}\n\nheader {\n  width: 600px;\n  height: 50px;\n  font-size: 14px;\n  border: 1px solid var(--fg-1);\n  border-bottom: none;\n}\n\naside > header {\n  width: 100%;\n  border: none;\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n  line-height: 50px;\n}\n\naside > ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  border-top: 1px solid var(--fg-1);\n}\n\naside > ul li {\n  text-indent: 20px;\n  height: 35px;\n  line-height: 35px;\n  border-bottom: 1px solid #ddd;\n}\n\nheader > button, header > span, header > div {\n  margin: 8px 8px 0 8px;\n}\n\nheader > div:nth-child(1) {\n  display: block;        \n  float: right;\n  height: 50px;\n  margin: 0\n}\n\nheader button {\n  display: block;\n  margin: 10px;\n  height: 30px;\n  min-width: 50px;\n  font-weight: 300;\n  padding: 3px 9px;\n  margin-left: 4px;\n  font-size: 14px;\n  font-family: 'Courier New', Courier, monospace;\n  color: var(--fg-1);\n  background: none;\n  border: 1px solid var(--fg-1);\n  box-shadow: 2px 2px 1px  rgb(177, 135, 201);\n}\nheader span {\n  display: none;\n  line-height: 50px;\n  height: 50px;\n  font-size: 16px;\n  padding-right: 20px;\n}\n\nheader button:focus {\n  outline: none;\n}\n\nheader button:hover {\n  color: var(--fg-2);\n  border: 1px solid var(--fg-3);\n}\n\nheader button:active {\n  box-shadow: none;\n  margin: 9px 8px 0px 4px;\n  box-shadow: -1px -1px 1px  rgb(76, 61, 85);\n}\n\nheader p {\n  margin: 0;\n  display: block;\n}\n\nheader > span {\n  float: left;\n  clear: left;\n}\n\ncanvas {\n  display: block;\n  border: 1px solid var(--fg-1)\n}\n\n:not(button) { cursor: default; }\nbutton, a { cursor: pointer; }\n\na {\n  color: var(--fg-3);\n  text-decoration: none;\n  transition: 0.18s linear all;\n}\n\na:hover {\n  color: var(--fg-2);\n  letter-spacing: 1.1pt;\n  transition: 0.18s linear all;\n}\n\ndiv.modal {\n  display: none;\n  background-color: #fff;\n  z-index: 99;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  margin-left: -150px;\n  margin-top: -100px;\n  border: 1px solid var(--fg-1);\n  width: 300px;\n  height: 200px;\n  box-shadow: 0 0 10px  rgb(177, 135, 201);\n}\n\ndiv.modal header {\n  width: 100%;\n  border: none;\n  border-bottom: 1px solid var(--fg-1);\n  font-size: 16px;\n  font-weight: bold;\n  text-align: center;\n  height: 30px;\n  line-height: 30px;\n}\n\ndiv.modal div.form {\n  height: 170px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\ndiv.form input {\n  height: 30px;\n  width: 200px;\n  text-indent: 10px;\n  font-size: 16px;\n  margin: 0;\n  padding: 0;\n}\n\ndiv.form input:focus {\n  outline: none;\n  box-shadow: 0 0 5px rgb(177, 135, 201) inset;\n}\n\ndiv.form button {\n  margin-top: 20px;\n  display: block;\n  width: 200px;\n  height: 30px;\n  font-weight: 300;\n  font-size: 14px;\n  font-family: 'Courier New', Courier, monospace;\n  color: var(--fg-1);\n  background: none;\n  border: 1px solid var(--fg-1);\n  box-shadow: 2px 2px 1px  rgb(177, 135, 201);\n}\n\ndiv.form button:focus {\n  outline: none;\n  box-shadow: 0 0 5px rgb(177, 135, 201) inset;\n}",""])},function(n,t,e){"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map(function(t){var e=function(n,t){var e=n[1]||"",o=n[3];if(!o)return e;if(t&&"function"==typeof btoa){var i=(s=o,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),r=o.sources.map(function(n){return"/*# sourceURL=".concat(o.sourceRoot).concat(n," */")});return[e].concat(r).concat([i]).join("\n")}var s,a,c;return[e].join("\n")}(t,n);return t[2]?"@media ".concat(t[2],"{").concat(e,"}"):e}).join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},i=0;i<this.length;i++){var r=this[i][0];null!=r&&(o[r]=!0)}for(var s=0;s<n.length;s++){var a=n[s];null!=a[0]&&o[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="(".concat(a[2],") and (").concat(e,")")),t.push(a))}},t}},function(n,t,e){"use strict";var o,i={},r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},s=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}();function a(n,t){for(var e=[],o={},i=0;i<n.length;i++){var r=n[i],s=t.base?r[0]+t.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};o[s]?o[s].parts.push(a):e.push(o[s]={id:s,parts:[a]})}return e}function c(n,t){for(var e=0;e<n.length;e++){var o=n[e],r=i[o.id],s=0;if(r){for(r.refs++;s<r.parts.length;s++)r.parts[s](o.parts[s]);for(;s<o.parts.length;s++)r.parts.push(g(o.parts[s],t))}else{for(var a=[];s<o.parts.length;s++)a.push(g(o.parts[s],t));i[o.id]={id:o.id,refs:1,parts:a}}}}function l(n){var t=document.createElement("style");if(void 0===n.attributes.nonce){var o=e.nc;o&&(n.attributes.nonce=o)}if(Object.keys(n.attributes).forEach(function(e){t.setAttribute(e,n.attributes[e])}),"function"==typeof n.insert)n.insert(t);else{var i=s(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var d,u=(d=[],function(n,t){return d[n]=t,d.filter(Boolean).join("\n")});function p(n,t,e,o){var i=e?"":o.css;if(n.styleSheet)n.styleSheet.cssText=u(t,i);else{var r=document.createTextNode(i),s=n.childNodes;s[t]&&n.removeChild(s[t]),s.length?n.insertBefore(r,s[t]):n.appendChild(r)}}var h=null,f=0;function g(n,t){var e,o,i;if(t.singleton){var r=f++;e=h||(h=l(t)),o=p.bind(null,e,r,!1),i=p.bind(null,e,r,!0)}else e=l(t),o=function(n,t,e){var o=e.css,i=e.media,r=e.sourceMap;if(i&&n.setAttribute("media",i),r&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}.bind(null,e,t),i=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return o(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;o(n=t)}else i()}}n.exports=function(n,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r());var e=a(n,t);return c(e,t),function(n){for(var o=[],r=0;r<e.length;r++){var s=e[r],l=i[s.id];l&&(l.refs--,o.push(l))}n&&c(a(n,t),t);for(var d=0;d<o.length;d++){var u=o[d];if(0===u.refs){for(var p=0;p<u.parts.length;p++)u.parts[p]();delete i[u.id]}}}}},function(n,t,e){"use strict";e.r(t);var o,i,r,s,a,c;e(0);class l{static init(n){n.height=l.height,n.width=l.width,l.context=n.getContext("2d")}static fill(n){l.context.beginPath(),l.context.rect(0,0,l.width,l.height),l.context.fillStyle=n,l.context.fill()}static fillRect(n,t,e,o,i){l.context.beginPath(),l.context.fillStyle=i,l.context.fillRect(n,t,e,o)}static drawRect(n,t,e,o,i){l.context.beginPath(),l.context.lineWidth=1,l.context.strokeStyle=i,l.context.rect(n,t,e,o),l.context.stroke()}}l.width=600,l.height=400;class d{constructor(n,t){this.X=n,this.Y=t}static copy(n){return new d(n.X,n.Y)}}!function(n){n[n.UP=38]="UP",n[n.DOWN=40]="DOWN",n[n.LEFT=37]="LEFT",n[n.RIGHT=39]="RIGHT",n[n.SPACEBAR=32]="SPACEBAR",n[n.W=87]="W",n[n.S=83]="S",n[n.A=65]="A",n[n.D=68]="D"}(o||(o={})),function(n){n[n.NORTH=0]="NORTH",n[n.SOUTH=1]="SOUTH",n[n.EAST=2]="EAST",n[n.WEST=3]="WEST"}(i||(i={})),function(n){n[n.UP=0]="UP",n[n.DOWN=1]="DOWN",n[n.LEFT=2]="LEFT",n[n.RIGHT=3]="RIGHT",n[n.NONE=4]="NONE"}(r||(r={})),function(n){n[n.SLOW=0]="SLOW",n[n.FAST=1]="FAST",n[n.NORMAL=2]="NORMAL"}(s||(s={})),function(n){n[n.TIMED=0]="TIMED",n[n.INFINITE=1]="INFINITE"}(a||(a={})),function(n){n[n.EVEN=0]="EVEN",n[n.ODD=1]="ODD"}(c||(c={}));class u{static placeObject(n,t){u.grid[t.X][t.Y]=n,n.position=d.copy(t)}static removeObjectAt(n){n&&(u.grid[n.X][n.Y]=null)}static moveObject(n,t){u.removeObjectAt(n.position),u.placeObject(n,t)}static placeAtRandom(n){const t=u.generateRandomPosition();u.moveObject(n,t)}static generateRandomPosition(){let n;for(;!n;){const t=Math.floor(Math.random()*u.width),e=Math.floor(Math.random()*u.height);if(!u.grid[t][e]){n=new d(t,e);break}}return n}static init(){u.height=l.height/u.blockSize,u.width=l.width/u.blockSize,u.grid=new Array(u.width);for(let n=0,t=u.width;n!==t;n++)u.grid[n]=new Array(u.height)}static draw(){l.fill(u.bgColor);for(let n=0;n<u.width;n++)for(let t=0;t<u.height;t++)u.grid[n][t]&&u.grid[n][t].draw()}}u.bgColor="#fff",u.gridColor="#001F5C",u.blockSize=8,u.height=0,u.width=0;class p{static processInput(){if(p.lastKey&&k.player){switch(p.lastKey){case o.W:case o.UP:k.player.direction!==r.DOWN&&k.user.api.control({direction:r.UP});break;case o.S:case o.DOWN:k.player.direction!==r.UP&&k.user.api.control({direction:r.DOWN});break;case o.A:case o.LEFT:k.player.direction!==r.RIGHT&&k.user.api.control({direction:r.LEFT});break;case o.D:case o.RIGHT:k.player.direction!==r.LEFT&&k.user.api.control({direction:r.RIGHT});break;case o.SPACEBAR:k.user.api.control({skill:o.SPACEBAR})}p.lastKey=null}}}p.lastKey=null,p.onKeyUp=n=>{p.lastKey=n.keyCode};class h{static init(){h.buttons.join=document.querySelector("#join"),h.buttons.send=document.querySelector("#send"),h.buttons.modal=document.querySelector("#modal"),h.buttons.auth=document.querySelector("#auth"),h.username=document.querySelector("#name"),h.userField=document.querySelector("#user"),h.textInput=document.querySelector("#typeing"),h.msgList=document.querySelector("#msg-list"),h.rankingUl=document.querySelector("#ranking-ul");const n=()=>{const{display:n}=h.buttons.modal.style;h.buttons.modal.style.display="block"===n?"none":"block"};h.buttons.join.onclick=n,h.buttons.auth.onclick=()=>{const t=h.username.value;k.userAuth(t,e=>{h.buttons.join.style.display="none",h.userField.innerHTML=`Hi, ${t}`,h.userField.style.display="block",n(),k.user.setUser(e)})};const t=()=>{if(!k.user.getUser())return void n();const t=h.textInput.value.trim();t&&k.user.api.typer(t),h.textInput.value=""};h.textInput.onkeydown=n=>{13===n.keyCode&&t()},h.buttons.send.onclick=t}static loadChatMessage(n){const{name:t,msg:e,date:o}=n,i=document.createElement("li"),r=new Date(o),s=`<span class="nick">${t}:</span>\n                    ${e}\n                  <span class="time">${`${r.getFullYear()}-${r.getMonth()+1}-${r.getDate()} ${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}`}</span>\n                  `;i.innerHTML=s,h.msgList.appendChild(i),h.msgList.parentElement.scrollTop=h.msgList.clientHeight}}h.buttons={join:null,send:null,modal:null,auth:null},h.username=null,h.textInput=null,h.userField=null,h.msgList=null,h.rankingUl=null,h.loadRankingList=function(n,t=1e3){let e=Date.now();return o=>{const i=Date.now();i-e>t&&(n(o),e=i)}}(n=>{let t="";n.forEach((n,e)=>{t+=`<li id='${n.token}'>\n        <strong>${e+1}.</strong> ${n.name} <span class='points' style='float: right; margin-right: 20px;'>${n.points}</span>\n      </li>`}),h.rankingUl.innerHTML=t});var f=n=>{return{userAuth(t){console.log("authentication ===> ",t);const e={Register:{Name:t}};n.send(JSON.stringify(e))},setUser(n){const t=JSON.stringify(n);window.localStorage.setItem("snake:user",t)},getUser:()=>JSON.parse(window.localStorage.getItem("snake:user")),removeUser(){window.localStorage.removeItem("snake:user"),window.location.reload()},api:{typer(t){n.send(JSON.stringify({ChatMsg:{msg:t}}))},control(t){n.send(JSON.stringify({GameControl:t}))}}}};class g{constructor({value:n}){this.value=n,this.index=g.coinsIndex,++g.coinsIndex,++g.coinsActive}static createRandom(){return new g({value:g.values[Math.floor(Math.random()*g.values.length)]})}handleCollision(n){n.points+=this.value,n.maxLength+=2,this.destroy()}draw(){if(!this.position)return;const n=this.position.X*u.blockSize+u.blockSize/2,t=this.position.Y*u.blockSize+u.blockSize/2,e=u.blockSize/2-1;l.context.beginPath(),l.context.arc(n,t,e,0,2*Math.PI,!1),l.context.strokeStyle="#FF0",l.context.fillStyle="#CC0",l.context.stroke(),l.context.fill()}destroy(){u.removeObjectAt(this.position),delete g.instances[this.index],--g.coinsActive}}g.values=[200,600,800,1e3,2e3],g.instances={},g.coinsIndex=0,g.coinsActive=0;class b{constructor(n){this.colorIndex=-1,this.position=n}draw(){const n=this.position.X*u.blockSize,t=this.position.Y*u.blockSize,e=u.blockSize;l.fillRect(n,t,e,e,this.getColor())}getColor(){const n=b.colors.length;return this.colorIndex++,b.colors[this.colorIndex%n]}handleCollision(n){n.die()}}b.colors=["#FF0000","#FF9966","#FFFA66","#66FF66","#66FFFD","#6699FF","#7966FF","#F366FF"];class x extends b{constructor({position:n,segments:t,speed:e,maxLength:o,direction:i,token:a,name:c,points:l}){super(n),this.jumpDistance=8,this.skipNextTurn=!1,this.hitDetected=!1,this.isAlive=!1,this.speed=s.SLOW,this.direction=r.NONE,this.hiScore=0,this.points=0,this.lives=999,this.segments=[],this.maxLength=x.defaultLength,this.segments[0]=this,this.isAlive=!0,this.name=c,this.maxLength=o,this.speed=e,this.direction=i,this.token=a,this.points=l,n&&(u.placeObject(this,n),t.length&&t.forEach(({position:n})=>{const t=new d(n.X,n.Y),e=new b(t);this.segments.push(e),u.placeObject(e,t)}))}jump(){const n=d.copy(this.position);switch(this.direction){case r.UP:n.Y-=this.jumpDistance;break;case r.DOWN:n.Y+=this.jumpDistance;break;case r.LEFT:n.X-=this.jumpDistance;break;case r.RIGHT:n.X+=this.jumpDistance;break;default:console.log("unknown direction ",this.direction)}this.updateBoard(n)}onHitScreenEdge(n){}die(){if(this.hitDetected=!0,this.hiScore=this.points>this.hiScore?this.points:this.hiScore,k.hiScore=this.hiScore>k.hiScore?this.hiScore:k.hiScore,!this.lives)return this.isAlive=!1,void k.reset();--this.lives,this.destroy(),this.position=new d(0,0),this.direction=r.NONE}setSpeed(n){this.speed=n,this.skipNextTurn=n===s.SLOW}processTurn(){if(!this.isAlive)return;const n=d.copy(this.position);this.updateBoard(n)}updateBoard(n){}destroy(){for(let n=0,t=this.segments.length;n!==t;n++)u.removeObjectAt(this.segments[n].position);this.segments=[this],this.maxLength=this.maxLength}}x.defaultLength=3;class m{constructor({speed:n}){this.speed=n,this.color=m.colors[this.speed],this.index=m.itemsIndex,++m.itemsIndex,++m.itemsActive}handleCollision(n){n.setSpeed(this.speed),this.destroy()}draw(){if(!this.position)return;const n=this.position.X*u.blockSize+2,t=this.position.Y*u.blockSize+2,e=u.blockSize-4;l.drawRect(n,t,e,e,this.color)}destroy(){u.removeObjectAt(this.position),delete m.instances[this.index],--m.itemsActive}}m.colors=["#3366FF","#FF1400"],m.instances={},m.itemsIndex=0,m.itemsActive=0,e.d(t,"default",function(){return k});var v,y=function(n,t){var e={};for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&t.indexOf(o)<0&&(e[o]=n[o]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(n);i<o.length;i++)t.indexOf(o[i])<0&&Object.prototype.propertyIsEnumerable.call(n,o[i])&&(e[o[i]]=n[o[i]])}return e};!function(n){n[n.EASY=300]="EASY",n[n.MEDIUM=150]="MEDIUM",n[n.DIFFICULT=50]="DIFFICULT"}(v||(v={}));let S="ws://localhost:3653";S="ws://localhost:3653",console.log("env ","production",S);const w=n=>{return n.map(n=>({token:n.token,name:n.name,points:n.points})).sort((n,t)=>t.points-n.points)};class k{static init(){l.init(document.querySelector("canvas")),document.querySelector("body").onkeyup=p.onKeyUp;const n=new WebSocket(S);k.syncChannel=n,n.onopen=function(){k.user=f(n),k.ready()},n.onclose=function(){k.user&&k.user.removeUser()},n.onmessage=function(n){let t;const e=new FileReader;e.readAsText(n.data),e.onload=function(){switch(t=JSON.parse(this.result),!0){case!!t.RegisterResp:null!=k.authCallback&&k.authCallback(t.RegisterResp.data);break;case!!t.DataSync:k.loadData(t.DataSync.dataMap),k.onClockTick();break;case!!t.ChatMsg:h.loadChatMessage(t.ChatMsg)}}}}static loadData(n){n=JSON.parse(`[${n.slice(0,-1)}]`),u.init(),k.players=[];const t=n.filter(n=>"SnakeSegment"===n.clazz);(n=n.filter(n=>"SnakeSegment"!==n.clazz)).forEach(n=>{const{clazz:e}=n,o=y(n,["clazz"]),i={Coin:g,Snake:x,SpeedCoin:m}[e];if(!i)return;i===x&&(o.segments=t);const r=new i(o);"Snake"===e&&(k.players.push(r),k.player=r),u.placeObject(r,o.position)}),h.loadRankingList(w(k.players))}static userAuth(n,t){k.user.userAuth(n),k.authCallback=t}static createUserChannel(n){console.log(n)}static ready(){u.init(),u.draw(),h.init()}static start(){k.isRunning||(k.clock.isPaused?k.pause():(k.isRunning=!0,k.clock.start()))}static pause(){if(k.clock.isPaused)return k.isRunning=!0,void k.clock.resume();k.clock.pause(),k.isRunning=!1}static reset(){k.isRunning=!1,k.ready()}static onClockTick(){p.processInput(),k.players.forEach(n=>n.processTurn()),u.draw()}}k.hiScore=0,k.isRunning=!1,k.coinCounter=0,k.players=[],k.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,